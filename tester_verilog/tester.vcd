$date
	Fri Jul 31 18:19:02 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module _____00003aT0 $end
$var wire 32 ! a [31:0] $end
$var wire 32 " _00005e_0000601 [31:0] $end
$var wire 32 # _00005e_0000600 [31:0] $end
$var reg 32 $ z__value [31:0] $end
$scope module tanh $end
$var wire 32 % _00005e_00006010 [31:0] $end
$var wire 8 & _00005e_00006013 [7:0] $end
$var wire 24 ' _00005e_00006016 [23:0] $end
$var wire 32 ( _00005e_00006017 [31:0] $end
$var wire 32 ) _00005e_00006018 [31:0] $end
$var wire 32 * _00005e_00006019 [31:0] $end
$var wire 32 + a [31:0] $end
$var wire 8 , addr [7:0] $end
$var wire 32 - base [31:0] $end
$var wire 32 . next__data [31:0] $end
$var wire 24 / remaining [23:0] $end
$var wire 32 0 z__value [31:0] $end
$var wire 32 1 _00005e_00006021 [31:0] $end
$var wire 32 2 _00005e_00006020 [31:0] $end
$var wire 32 3 _00005e_00006015 [31:0] $end
$var wire 32 4 _00005e_00006014 [31:0] $end
$var wire 24 5 _00005e_00006012 [23:0] $end
$var wire 8 6 _00005e_00006011 [7:0] $end
$scope module my__calculator $end
$var wire 32 7 addr [31:0] $end
$var wire 32 8 base [31:0] $end
$var wire 32 9 next__data [31:0] $end
$var wire 24 : remaining [23:0] $end
$var wire 32 ; z__value [31:0] $end
$var wire 32 < estimated__value [31:0] $end
$upscope $end
$scope module my__table $end
$var wire 8 = addr [7:0] $end
$var wire 32 > base [31:0] $end
$var reg 32 ? next__data [31:0] $end
$upscope $end
$scope module my__translator $end
$var wire 32 @ z__value [31:0] $end
$var wire 24 A remaining [23:0] $end
$var wire 8 B addr [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B
b0 A
b0 @
b10111111111101110000000 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b10111111111101110000000 9
b0 8
b0 7
b0 6
b0 5
b0 4
b10111111111101110000000 3
b0 2
b0 1
b0 0
b0 /
b10111111111101110000000 .
b0 -
b0 ,
b0 +
b10111111111101110000000 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10
b11111111101000000000010010000000 *
b11111111101000000000010010000000 9
b11111111101000000000010010000000 .
b11111111101000000000010010000000 3
b11111111101000000000010010000000 ?
b11111111000000000000000000000000 2
b11111111000000000000000000000000 7
b11111111101000000000010010000000 )
b11111111101000000000010010000000 8
b11111111101000000000010010000000 -
b11111111101000000000010010000000 4
b11111111101000000000010010000000 >
b11111111 &
b11111111 =
b11111111 ,
b11111111 6
b11111111 B
b111111111111111111111111 '
b111111111111111111111111 :
b111111111111111111111111 /
b111111111111111111111111 5
b111111111111111111111111 A
b11111111101000000000010010000000 !
b11111111101000000000010010000000 "
b11111111101000000000010010000000 +
b11111111101000000000010010000000 1
b11111111101000000000010010000000 <
b11111111111111111111111111111111 %
b11111111111111111111111111111111 @
b11111111111111111111111111111111 (
b11111111111111111111111111111111 ;
b11111111111111111111111111111111 #
b11111111111111111111111111111111 $
b11111111111111111111111111111111 0
#20
